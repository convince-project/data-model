<?xml version="1.1" encoding="UTF-8" ?>
<properties>
  <ports>
    <scxml_event_send event="bt_1000_response" origin="1000_ReactiveSequence" target="bt_root_fsm_Policy0">
      <state_var id="tick" param="status" type="int32" expr="0"/>
    </scxml_event_send>
    <scxml_event_send event="topic_uc2__info__properties__move_block_abort_time_msg" origin="MoveBlockSkill" target="NONE">
      <event_var id="abort_move_block"/>
      <state_var id="abort_time" param="ros_fields__sec" type="int32" expr="0"/>
    </scxml_event_send>
    <scxml_event_send event="topic_clock_msg" origin="autogenerated_global_timer" target="MoveBlockSkill">
      <state_var id="time" param="ros_fields__sec" type="int32" expr="0"/>
    </scxml_event_send>
    <scxml_event_send event="action_uc2__skills__move_block_result" origin="MoveBlockSkill" target="action_handler_uc2__skills__move_block">
      <event_var id="move_block"/>
      <state_var id="move_code" param="code" type="int32" expr="0"/>
    </scxml_event_send>
  </ports>

  <guarantees>
    <property id="executes_recovery_branch_or_success" expr="H ( (not (P { abort_move_block })) or { time &lt; abort_time + 20 } or (P { move_code == 4 }))"/>
    <property id="move_success" expr="P { tick == 1 }"/>
    <!-- NOTE: messages move_block and move_code don't arrive at the same time, but they still arrive in the same time step -->
    <!-- NOTE: this could be supported via an event_var + param port -->
    <property id="move_action_success" expr="P ( (P[0:0] { move_block }) and { move_code == 4 } )"/>
  </guarantees>
</properties>
